class Solution {
public:
    int find(vector<int> &parent,int val){
        if(parent[val]==val){
            return parent[val];
        }
        return parent[val]=find(parent,parent[val]);
    }
    
    void Union(int val1,int val2,vector<int> &parent,vector<int> &rank){
        int root1=find(parent,val1);
        int root2=find(parent,val2);
        if(root1==root2){
            return;
        }
        parent[root1]=root2;
        rank[root2]+=rank[root1];
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<int> parent(n,-1);
        vector<int> rank(n,1);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j]==1){
                    Union(i,j,parent,rank);
                }
            }
        }
        
        vector<int> infected(n,0);
        for(int i=0;i<initial.size();i++){
            int root=find(parent,initial[i]);
            infected[root]++;
        }
        int maxVal=0;
        int index=-1;
        sort(initial.begin(),initial.end());
        for(int i=0;i<initial.size();i++){
            int root=find(parent,initial[i]);
            if(infected[root]==1){
                if(maxVal<rank[root]){
                    maxVal=rank[root];
                    index=initial[i];
                }
            }
        }
        return index==-1?initial[0]:index;
    }
};
